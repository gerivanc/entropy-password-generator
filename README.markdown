# EntroPy Password Generator

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/gerivanc/entropy-password-generator/blob/main/LICENSE.md)
[![Made with Python](https://img.shields.io/badge/Made%20with-Python-1f425f.svg)](https://www.python.org)
![Badge: Entropy Compliant](https://img.shields.io/badge/Entropy%20Compliant-Proton%C2%A9%20%26%20NIST-brightgreen)
[![Maintained](https://img.shields.io/badge/Maintained?-yes-green.svg)](https://github.com/gerivanc/entropy-password-generator/graphs/commit-activity)
[![Build Status](https://github.com/gerivanc/entropy-password-generator/actions/workflows/ci.yml/badge.svg)](https://github.com/gerivanc/entropy-password-generator/actions/workflows/ci.yml)

**EntroPy Password Generator** is a secure and customizable password generator developed in Python. It generates strong passwords with configurable character sets and calculates their entropy to evaluate robustness. **The project provides 20 modes for secure password generation**, ranging from 15 to 128 characters, with entropies between 95.70 bits and 816.64 bits. This exceeds the [**Proton©**](https://proton.me/blog/what-is-password-entropy) recommended minimum of 75 bits and the cryptographic strength best practices outlined in [**NIST SP 800-63B**](https://pages.nist.gov/800-63-3/sp800-63b.html) and [**NIST SP 800-132**](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf). 

## Disclaimer
I strongly recommend that you do not attempt to memorize the passwords generated by this method. Instead, use a reliable password manager, such as [Bitwarden©](https://bitwarden.com/), which I personally recommend and use. **Remember: the only password you must memorize is the master password for your password manager's vault. Additionally, it is essential to create a strong master password using a combination of uppercase and lowercase letters, numbers, and special characters. Whenever possible, enable two-factor authentication (2FA) to further protect your data.**

## Features
- Generates passwords with lengths between 15 and 128 characters.
- Supports uppercase letters (A-Z), lowercase letters (a-z), digits (0-9), and special characters (`!@#$%^&*()_+-=[]{}|;:,.<>?~\\\`).
- Option to exclude visually ambiguous characters (e.g., 'I', 'l', 'O', '0') for better readability.
- Calculates password entropy (in bits) to evaluate strength.
- Command-line interface (CLI) for flexible usage.
- Uses Python's `secrets` module for cryptographically secure random generation.

## Installation
1. Ensure you have Python 3.6 or higher installed.
2. Clone the repository:
   ```bash
   git clone https://github.com/gerivanc/entropy-password-generator.git
   cd entropy-password-generator
   ```
3. No additional dependencies are required, as the project uses only Python standard libraries.

## Example Password Modes
The project includes 20 predefined password generation modes, divided into two blocks:

### Strong Passwords Block I (All with ambiguous characters, length 24):
1. Lowercase + Special characters.
2. Uppercase + Special characters.
3. Uppercase + Lowercase.
4. Uppercase + Digits.
5. Lowercase + Digits.
6. Digits + Special characters.
7. Uppercase + Lowercase + Digits.
8. Uppercase + Lowercase + Special characters.
9. Uppercase + Digits + Special characters.
10. Lowercase + Digits + Special characters.

### Strong Passwords Block II (Mixed configurations):
11. 15 characters, all character types, no ambiguous characters (95.70 bits entropy).
12. 18 characters, all character types, with ambiguous characters.
13. 20 characters, only lowercase letters and digits, no ambiguous characters.
14. 20 characters, only uppercase letters and digits, no ambiguous characters.
15. 24 characters, all character types, no ambiguous characters.
16. 32 characters, all character types, no ambiguous characters.
17. 42 characters, all character types, no ambiguous characters.
18. 60 characters, all character types, no ambiguous characters.
19. 75 characters, all character types, no ambiguous characters.
20. 128 characters, all character types, no ambiguous characters (816.64 bits entropy).

These modes produce passwords with entropies exceeding both the Proton© recommendation of 75 bits, ensuring high security.

## CLI Options - Usage Block I
- `--length <length>`: Set password length (fixed to 24 for Block I modes).
- `--no-uppercase`: Exclude uppercase letters.
- `--no-lowercase`: Exclude lowercase letters.
- `--no-digits`: Exclude digits.
- `--no-special`: Exclude special characters.
- `--with-ambiguous`: Include ambiguous characters (enabled by default for Block I).

## CLI Options - Usage Block II
- `--length <length>`: Set password length (15 to 128 for Block II modes).
- `--no-uppercase`: Exclude uppercase letters.
- `--no-lowercase`: Exclude lowercase letters.
- `--no-digits`: Exclude digits.
- `--no-special`: Exclude special characters.
- `--with-ambiguous`: Include ambiguous characters (optional, enabled only for mode 12).
**Note**: Block II modes offer greater flexibility, allowing variable lengths and control over ambiguous characters to suit diverse security needs.

## Usage Block I (All with ambiguous characters, length 24)
Run the generator via the command-line interface for Block I modes:
```bash
python password_generator.py --length 24 --no-uppercase --no-digits
python password_generator.py --length 24 --no-lowercase --no-digits
python password_generator.py --length 24 --no-digits --no-special
python password_generator.py --length 24 --no-lowercase --no-special
python password_generator.py --length 24 --no-uppercase --no-special
python password_generator.py --length 24 --no-uppercase --no-lowercase
python password_generator.py --length 24 --no-special
python password_generator.py --length 24 --no-digits
python password_generator.py --length 24 --no-lowercase
python password_generator.py --length 24 --no-uppercase
```

## Usage Block II (Mixed configurations)
Run the generator via the command-line interface for Block II modes:
```bash
python password_generator.py --length 15
python password_generator.py --length 18 --with-ambiguous
python password_generator.py --length 20 --no-uppercase --no-special
python password_generator.py --length 20 --no-lowercase --no-special
python password_generator.py --length 24
python password_generator.py --length 32
python password_generator.py --length 42
python password_generator.py --length 60
python password_generator.py --length 75
python password_generator.py --length 128
```

## Example CLI Usage 20 usage modes
Below are the CLI commands and example outputs for all 20 predefined password generation modes, divided into two blocks for clarity.

### CLI Usage Block I
The following commands generate passwords for Block I modes, all with ambiguous characters and a length of 24 characters:

**Mode 1: Lowercase + Special characters**
```bash
python password_generator.py --length 24 --no-uppercase --no-digits
```
```
Generated password: ax!z@q#r$y^m&p-t=l~k]w{
Entropy: 139.92 bits
```

**Mode 2: Uppercase + Special characters**
```bash
python password_generator.py --length 24 --no-lowercase --no-digits
```
```
Generated password: AX!ZQ#R$Y^M&P-T=L~K]W{
Entropy: 139.92 bits
```

**Mode 3: Uppercase + Lowercase**
```bash
python password_generator.py --length 24 --no-digits --no-special
```
```
Generated password: AxZqRyMkPlTvCnHwBsKdFeJi
Entropy: 136.80 bits
```

**Mode 4: Uppercase + Digits**
```bash
python password_generator.py --length 24 --no-lowercase --no-special
```
```
Generated password: AX7ZQ4R9Y2M8P5T3L1K6W0N
Entropy: 124.08 bits
```

**Mode 5: Lowercase + Digits**
```bash
python password_generator.py --length 24 --no-uppercase --no-special
```
```
Generated password: ax7zq4r9y2m8p5t3l1k6w0n
Entropy: 124.08 bits
```

**Mode 6: Digits + Special characters**
```bash
python password_generator.py --length 24 --no-uppercase --no-lowercase
```
```
Generated password: 7!4#9$2&8%5^3*1@6-0=2+|
Entropy: 128.64 bits
```

**Mode 7: Uppercase + Lowercase + Digits**
```bash
python password_generator.py --length 24 --no-special
```
```
Generated password: Ax7Zq4Ry9Mk2Pl8Tv5Cn3Hw
Entropy: 142.80 bits
```

**Mode 8: Uppercase + Lowercase + Special characters**
```bash
python password_generator.py --length 24 --no-digits
```
```
Generated password: Ax!Zq@Ry#Mk-Pl=Tv&Cn+Hw
Entropy: 153.12 bits
```

**Mode 9: Uppercase + Digits + Special characters**
```bash
python password_generator.py --length 24 --no-lowercase
```
```
Generated password: AX!7ZQ#4R$9Y@2M&8P%5T*3
Entropy: 145.68 bits
```

**Mode 10: Lowercase + Digits + Special characters**
```bash
python password_generator.py --length 24 --no-uppercase
```
```
Generated password: ax!7zq#4r$9y@2m&8p%5t*3
Entropy: 145.68 bits
```

---

### CLI Usage Block II
The following commands generate passwords for Block II modes, with mixed configurations including variable lengths and optional ambiguous characters:

**Mode 11: All character types, no ambiguous characters (length 15)**
```bash
python password_generator.py --length 15
```
```
Generated password: A7xPq9zT2rYwK5m
Entropy: 95.70 bits
```

**Mode 12: All character types, with ambiguous characters (length 18)**
```bash
python password_generator.py --length 18 --with-ambiguous
```
```
Generated password: A7xPq9zT2rYwK5mJ3I
Entropy: 117.72 bits
```

**Mode 13: Lowercase + Digits, no ambiguous characters (length 20)**
```bash
python password_generator.py --length 20 --no-uppercase --no-special
```
```
Generated password: ax9zq4r7y2m8p5t3k6w
Entropy: 99.00 bits
```

**Mode 14: Uppercase + Digits, no ambiguous characters (length 20)**
```bash
python password_generator.py --length 20 --no-lowercase --no-special
```
```
Generated password: AX9ZQ4R7Y2M8P5T3K6W
Entropy: 99.00 bits
```

**Mode 15: All character types, no ambiguous characters (length 24)**
```bash
python password_generator.py --length 24
```
```
Generated password: A7xPq9zT2rYwK5mJ3kG8vN
Entropy: 153.12 bits
```

**Mode 16: All character types, no ambiguous characters (length 32)**
```bash
python password_generator.py --length 32
```
```
Generated password: A7xPq9zT2rYwK5mJ3kG8vN4tF2wE6bR
Entropy: 204.16 bits
```

**Mode 17: All character types, no ambiguous characters (length 42)**
```bash
python password_generator.py --length 42
```
```
Generated password: A7xPq9zT2rYwK5mJ3kG8vN4tF2wE6bR9yU2pL5n
Entropy: 267.96 bits
```

**Mode 18: All character types, no ambiguous characters (length 60)**
```bash
python password_generator.py --length 60
```
```
Generated password: A7xPq9zT2rYwK5mJ3kG8vN4tF2wE6bR9yU2pL5nQ8mB4vX7zT3rK9w
Entropy: 382.80 bits
```

**Mode 19: All character types, no ambiguous characters (length 75)**
```bash
python password_generator.py --length 75
```
```
Generated password: A7xPq9zT2rYwK5mJ3kG8vN4tF2wE6bR9yU2pL5nQ8mB4vX7zT3rK9w2tY5mP8xN6r
Entropy: 478.50 bits
```

**Mode 20: All character types, no ambiguous characters (length 128)**
```bash
python password_generator.py --length 128
```
```
Generated password: A7xPq9zT2rYwK5mJ3kG8vN4tF2wE6bR9yU2pL5nQ8mB4vX7zT3rK9w2tY5mP8xN6rZkB3wE9tL4qP6mV2xR8yH5nF7jT1zG4rK9vU3m
Entropy: 816.64 bits
```

## Password Entropy Calculation
The generator calculates password entropy using the formula: \( E(R) = \log_2(R^L) \). Entropy = \( \log_2(\text{possibilities per character}) \times \text{password length} \). Higher entropy indicates a stronger password. The project's 20 modes ensure entropies from 95.70 bits (15 characters) to 816.64 bits (128 characters), surpassing the [**Proton©**](https://proton.me/blog/what-is-password-entropy) minimum of 75 bits. See the [**Entropy Calculation**](https://github.com/gerivanc/entropy-password-generator/blob/main/EntropyCalculation.md) document for details.

## License
This project is licensed under the MIT License. See the [**License**](https://github.com/gerivanc/entropy-password-generator/blob/main/LICENSE.md) file for details.

## Contributing
Want to contribute? Check out our [**Contributing Guidelines**](https://github.com/gerivanc/entropy-password-generator/blob/main/CONTRIBUTING.md) to get started!

## Changelog
See the [**Changelog**](https://github.com/gerivanc/entropy-password-generator/blob/main/CHANGELOG.md) for a detailed history of changes to this project.

## Contact
For questions or feedback, please contact: enc28ysi@protonmail.com.

#### Copyright © 2025 Gerivan Costa dos Santos